//***************************************************************************************************************************************************
//
// File Name: PlayerCharacter.cpp
//
// Description:
//  TODO: Add file description.
//
// Change History:
//  Author               Date           Description
//  Matthew D. Yorke     MM/DD/2018     TODO: Add history update
//
//***************************************************************************************************************************************************

#include <allegro5/allegro_primitives.h>
#include "PlayerCharacter.h"
#include "IdleState.h"

//***************************************************************************************************************************************************
// Start Public Method Definitions
//***************************************************************************************************************************************************

//***************************************************************************************************************************************************
//
// Method Name: PlayerCharacter
//
// Description:
//  TODO: Add method description.
//
//***************************************************************************************************************************************************
PlayerCharacter::PlayerCharacter(Graphics& theGraphics, int theCoordinateX, int theCoordinateY) :
Object(0, 0, (32 / 2), (32 / 2))
{
   mCurrentHealth = mMaxHealth = 10;
   mCurrentMana = mMaxMana = 5;
   mpVelocity = new Vector2D(1.0F,
                             1.0F);
   mpSprite = new AnimatedSprite(theGraphics,
                                 "../Images/TestSpriteSheet.png",
                                 0,
                                 0,
                                 32,
                                 32,
                                 5,
                                 4);
   mpHitbox = new Rectangle(theCoordinateX + 10,
                            theCoordinateY,
                            12,
                            32);
   mpMeleeWeapon = new MeleeWeapon(theGraphics,
                                   1,
                                   0,
                                   0,
                                   8,
                                   16);
   mpCurrentState = new IdleState();
   mpCurrentState->SetCharacterReference(this);
   mDirection = PlayerConstants::DIRECTION::DOWN;
}

//***************************************************************************************************************************************************
//
// Method Name: ~PlayerCharacter
//
// Description:
//  TODO: Add method description.
//
//***************************************************************************************************************************************************
PlayerCharacter::~PlayerCharacter()
{
   delete mpVelocity;
   delete mpSprite;
}

//************************************************************************************************************************************************
//
// Method Name: DrawSprite
//
// Description:
//  TODO: Add description.
//
// Arguments:
//  theGraphics - TODO: Add description.
//
// Return:
//  N/A
//
//************************************************************************************************************************************************
void PlayerCharacter::DrawSprite(Graphics& theGraphics)
{
   mpSprite->Draw(theGraphics,
                  static_cast<int>(GetCoordinateX()),
                  static_cast<int>(GetCoordinateY()));
}

//***************************************************************************************************************************************************
// End Public Method Definitions
//***************************************************************************************************************************************************

//***************************************************************************************************************************************************
// Start Protected Method Definitions
//***************************************************************************************************************************************************



//***************************************************************************************************************************************************
// End Protected Method Definitions
//***************************************************************************************************************************************************

//***************************************************************************************************************************************************
// Start Private Method Definitions
//***************************************************************************************************************************************************



//***************************************************************************************************************************************************
// End Private Method Definitions
//***************************************************************************************************************************************************