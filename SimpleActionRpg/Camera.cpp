//***************************************************************************************************************************************************
//
// File Name: Camera.cpp
//
// Description:
//  TODO: Add file description.
//
// Change History:
//  Author               Date           Description
//  Matthew D. Yorke     MM/DD/2018     TODO: Add history update
//
//***************************************************************************************************************************************************

#include "allegro5/allegro.h"
#include "Camera.h"

//***************************************************************************************************************************************************
// Start Public Method Definitions
//***************************************************************************************************************************************************

//***************************************************************************************************************************************************
//
// Method Name: Camera
//
// Description:
//  TODO: Add method description.
//
//***************************************************************************************************************************************************
Camera::Camera()
{
   mCoordinateX = 0.0F;
   mCoordinateY = 0.0F;
}

//***************************************************************************************************************************************************
//
// Method Name: Update
//
// Description:
//  TODO: Add method description.
//
//***************************************************************************************************************************************************
void Camera::Update(float thePlayerCoordinateX, float thePlayerCoordinateY)
{
   // Note: 960 is screen width and 540 is screen height.
   // TODO: Change those values to use constants.
   // Note 2: 32 represents the width and height of the player sprite.
   // TODO: Change those values to obtain from constants.
   mCoordinateX = -(960 / 2) + (thePlayerCoordinateX + 32/ 2); 
   mCoordinateY = -(540 / 2) + (thePlayerCoordinateY + 32/ 2); 

   if (mCoordinateX < 0.0F)
   {
      mCoordinateX = 0.0F;
   }
   // TODO: Need to see maximum x value. This can be a member variable that is adjustable based on map sizes.

   if (mCoordinateY < 0.0F)
   {
      mCoordinateY = 0.0F;
   }
   // TODO: Need to see maximum y value. This can be a member variable that is adjustable based on map sizes.

   al_identity_transform(&mCamera);
   al_translate_transform(&mCamera, -mCoordinateX, -mCoordinateY);
   al_use_transform(&mCamera);
}

//***************************************************************************************************************************************************
// End Public Method Definitions
//***************************************************************************************************************************************************

//***************************************************************************************************************************************************
// Start Protected Method Definitions
//***************************************************************************************************************************************************



//***************************************************************************************************************************************************
// End Protected Method Definitions
//***************************************************************************************************************************************************

//***************************************************************************************************************************************************
// Start Private Method Definitions
//***************************************************************************************************************************************************



//***************************************************************************************************************************************************
// End Private Method Definitions
//***************************************************************************************************************************************************