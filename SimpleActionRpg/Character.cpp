//***************************************************************************************************************************************************
//
// File Name: Character.cpp
//
// Description:
//  TODO: Add file description.
//
// Change History:
//  Author               Date           Description
//  Matthew D. Yorke     MM/DD/2018     TODO: Add history update
//
//***************************************************************************************************************************************************

#include <allegro5/allegro_primitives.h>
#include "Character.h"
#include "IdleState.h"

//***************************************************************************************************************************************************
// Start Public Method Definitions
//***************************************************************************************************************************************************

//***************************************************************************************************************************************************
//
// Method Name: Character
//
// Description:
//  TODO: Add method description.
//
//***************************************************************************************************************************************************
Character::Character(Graphics& theGraphics, int theCoordinateX, int theCoordinateY) :
RectangleObject(theCoordinateX, theCoordinateY, 64, 64)
{
}

//***************************************************************************************************************************************************
//
// Method Name: ~Character
//
// Description:
//  TODO: Add method description.
//
//***************************************************************************************************************************************************
Character::~Character()
{
   delete mpSprite;
   delete mpHitbox;
   delete mpMovementHitbox;
}

//************************************************************************************************************************************************
//
// Method Name: SetCurrentTile
//
// Description:
//  TODO: Add description.
//

//************************************************************************************************************************************************
void Character::SetCurrentTile(TileInformation* theCurrentTile)
{
   mpCurrentTile = theCurrentTile;
}

//************************************************************************************************************************************************
//
// Method Name: GetCurrentTile
//
// Description:
//  TODO: Add description.
//

//************************************************************************************************************************************************
TileInformation* Character::GetCurrentTile()
{
   return mpCurrentTile;
}

//************************************************************************************************************************************************
//
// Method Name: GetSprite
//
// Description:
//  TODO: Add description.
//
//************************************************************************************************************************************************
AnimatedSprite* Character::GetSprite()
{
   return mpSprite;
}

//************************************************************************************************************************************************
//
// Method Name: GetHitBox
//
// Description:
//  TODO: Add description.
//
//************************************************************************************************************************************************
RectangleObject* Character::GetHitBox()
{
   return mpHitbox;
}

//************************************************************************************************************************************************
//
// Method Name: GetMovementHitBox
//
// Description:
//  TODO: Add description.
//
//************************************************************************************************************************************************
RectangleObject* Character::GetMovementHitBox()
{
   return mpMovementHitbox;
}

//************************************************************************************************************************************************
//
// Method Name: TakeDamage
//
// Description:
//  TODO: Add description.
//
//************************************************************************************************************************************************
void Character::TakeDamage(int theDamage)
{
   mCurrentHealth -= theDamage;
}

////************************************************************************************************************************************************
////
//// Method Name: Update
////
//// Description:
////  TODO: Add description.
////
////************************************************************************************************************************************************
//void Character::Update(float theTimeChange)
//{
//   mpCurrentState->Update(theTimeChange);
//   mpHitbox->SetCoordinateX(GetCoordinateX() + 20);
//   mpHitbox->SetCoordinateY(GetCoordinateY() + 1);
//   mpMovementHitbox->SetCoordinateX(GetCoordinateX() + 20);
//   mpMovementHitbox->SetCoordinateY(GetCoordinateY() + 33);
//}

////************************************************************************************************************************************************
////
//// Method Name: Draw
////
//// Description:
////  TODO: Add description.
////
////************************************************************************************************************************************************
//void Character::Draw(Graphics& theGraphics)
//{
//   mpCurrentState->Draw(theGraphics);
//   al_draw_rectangle(mpHitbox->GetCoordinateX(), mpHitbox->GetCoordinateY(), mpHitbox->GetCoordinateX() + mpHitbox->GetWidth(), mpHitbox->GetCoordinateY()+ mpHitbox->GetHeight(), al_map_rgb(255,0,0), 1);
//   al_draw_rectangle(mpMovementHitbox->GetCoordinateX(), mpMovementHitbox->GetCoordinateY(), mpMovementHitbox->GetCoordinateX() + mpMovementHitbox->GetWidth(), mpMovementHitbox->GetCoordinateY()+ mpMovementHitbox->GetHeight(), al_map_rgb(0,0,255), 1);
//}

////************************************************************************************************************************************************
////
//// Method Name: DrawSprite
////
//// Description:
////  TODO: Add description.
////
//// Arguments:
////  theGraphics - TODO: Add description.
////
//// Return:
////  N/A
////
////************************************************************************************************************************************************
//void Character::DrawSprite(Graphics& theGraphics)
//{
//   mpSprite->Draw(theGraphics,
//                  GetCoordinateX(),
//                  GetCoordinateY());
//   if (mpCurrentTile != nullptr)
//   {
//      al_draw_rectangle(mpCurrentTile->TileCoordinateX * 32,
//                        mpCurrentTile->TileCoordinateY * 32,
//                        (mpCurrentTile->TileCoordinateX * 32) + 32,
//                        (mpCurrentTile->TileCoordinateY * 32) + 32,
//                        al_map_rgb(255, 255, 0),
//                        1);
//   }
//}

//***************************************************************************************************************************************************
// End Public Method Definitions
//***************************************************************************************************************************************************

//***************************************************************************************************************************************************
// Start Protected Method Definitions
//***************************************************************************************************************************************************



//***************************************************************************************************************************************************
// End Protected Method Definitions
//***************************************************************************************************************************************************

//***************************************************************************************************************************************************
// Start Private Method Definitions
//***************************************************************************************************************************************************



//***************************************************************************************************************************************************
// End Private Method Definitions
//***************************************************************************************************************************************************