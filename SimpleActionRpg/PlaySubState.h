//***************************************************************************************************************************************************
//
// File Name: PlaySubState.h
//
// Description:
//  TODO: Add file description.
//
// Change History:
//  Author               Date           Description
//  Matthew D. Yorke     MM/DD/YYYY     TODO: Add Description.
//
//***************************************************************************************************************************************************

#ifndef PlaySubState_H
#define PlaySubState_H

#include <allegro5/allegro_acodec.h>
#include "Graphics.h"
#include "PlayState.h"
#include "RectangleObject.h"

class PlayState;

class PlaySubState
{
   //************************************************************************************************************************************************
   // Start Method Declarations
   //************************************************************************************************************************************************

   public:

      //************************************************************************************************************************************************
      //
      // Method Name: PlaySubState
      //
      // Description:
      //  TODO: Add description.
      //
      // Arguments:
      //  N/A
      //
      // Return:
      //  N/A
      //
      //************************************************************************************************************************************************
      PlaySubState(PlayState* pThePlayState);

      //************************************************************************************************************************************************
      //
      // Method Name: KeyDown
      //
      // Description:
      //  TODO: Add description.
      //
      // Arguments:
      //  theEvent - TODO: Add description.
      //
      // Return:
      //  N/A
      //
      //************************************************************************************************************************************************
      virtual void KeyDown(ALLEGRO_EVENT theEvent) = 0;

      //************************************************************************************************************************************************
      //
      // Method Name: KeyUp
      //
      // Description:
      //  TODO: Add description.
      //
      // Arguments:
      //  theEvent - TODO: Add description.
      //
      // Return:
      //  N/A
      //
      //************************************************************************************************************************************************
      virtual void KeyUp(ALLEGRO_EVENT theEvent) = 0;

      //************************************************************************************************************************************************
      //
      // Method Name: Update
      //
      // Description:
      //  TODO: Add description.
      //
      // Arguments:
      //  N/A
      //
      // Return:
      //  N/A
      //
      //************************************************************************************************************************************************
      virtual void Update(float theTimeChange) = 0;

      //************************************************************************************************************************************************
      //
      // Method Name: Draw
      //
      // Description:
      //  TODO: Add description.
      //
      // Arguments:
      //  N/A
      //
      // Return:
      //  N/A
      //
      //************************************************************************************************************************************************
      virtual void Draw(Graphics& theGraphics) = 0;

   protected:

      //*********************************************************************************************************************************************
      //
      // Method Name: CollisionDetection
      //
      // Description:
      //  TODO: Add description.
      //
      // Arguments:
      //  theRectangleOne - TODO: Add description.
      //  theRectangleTwo - TODO: Add description.
      //
      // Return:
      //  TODO: Add description.
      //
      //*********************************************************************************************************************************************
      bool CollisionDetection(RectangleObject* theRectangleOne, RectangleObject* theRectangleTwo);

      //*********************************************************************************************************************************************
      //
      // Method Name: PlayerAttackCollision
      //
      // Description:
      //  TODO: Add description.
      //
      // Arguments:
      //  N/A
      //
      // Return:
      //  N/A
      //
      //*********************************************************************************************************************************************
      void PlayerAttackCollision();

      //*********************************************************************************************************************************************
      //
      // Method Name: MapNonTraverableMapTileCollision
      //
      // Description:
      //  TODO: Add description.
      //
      // Arguments:
      //  N/A
      //
      // Return:
      //  N/A
      //
      //*********************************************************************************************************************************************
      void MapNonTraverableMapTileCollision();

      //*********************************************************************************************************************************************
      //
      // Method Name: MapEventCollision
      //
      // Description:
      //  TODO: Add description.
      //
      // Arguments:
      //  N/A
      //
      // Return:
      //  N/A
      //
      //*********************************************************************************************************************************************
      void MapEventCollision();

   private:

      // There are currently no private methods for this class.

   //************************************************************************************************************************************************
   // End Method Declarations
   //************************************************************************************************************************************************

   //************************************************************************************************************************************************
   // Start Member Variable Declarations
   //************************************************************************************************************************************************

   public:

      // There are currently no public member variables for this class.

   protected:

      PlayState* mpPlayeState;

   private:

      // There are currently no private member variables for this class.

   //************************************************************************************************************************************************
   // End Member Variable Declarations
   //************************************************************************************************************************************************

};

#endif