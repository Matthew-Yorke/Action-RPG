//***************************************************************************************************************************************************
//
// File Name: EventStorage.cpp
//
// Description:
//  TODO: Add file description.
//
// Change History:
//  Author               Date           Description
//  Matthew D. Yorke     MM/DD/YYYY     TODO: Add Description.
//
//***************************************************************************************************************************************************

#include "EventStorage.h"

//***************************************************************************************************************************************************
// Start Public Method Definitions
//***************************************************************************************************************************************************

// Set initial static member variables.
EventStorage* EventStorage::mpInstance = nullptr;
int EventStorage::mNumberOfReferences = 0;

//***************************************************************************************************************************************************
//
// Method Name: GetInstance
//
// Description:
//  If an instance doesn't exist, create a new instance of this class. Increment the number of references to this class. Return the instance of this
//  class.
//
//***************************************************************************************************************************************************
EventStorage* EventStorage::GetInstance()
{
    if (mpInstance == nullptr)
    {
        mpInstance = new EventStorage();
    }

    mNumberOfReferences++;

    return mpInstance;
}

//***************************************************************************************************************************************************
//
// Method Name: ReleaseInstance
//
// Description:
//  Decrement the number of references to this class. If the number of references reaches zero and the instance exists, delete the instance of this
//  class.
//
//***************************************************************************************************************************************************
void EventStorage::ReleaseInstance()
{
   mNumberOfReferences--;
 
   if((mNumberOfReferences == 0) && (mpInstance != nullptr))
   {
   	delete mpInstance;
   	mpInstance = nullptr;						
   }
}

//***************************************************************************************************************************************************
//
// Method Name: AddChangeMapEvent
//
// Description:
//  Add a change map event to the change map event vector.
//
//***************************************************************************************************************************************************
void EventStorage::AddChangeMapEvent(ChangeMapEvent* thepChangeMapEvent)
{
   mChangeMapEvents.push_back(thepChangeMapEvent);
}

//***************************************************************************************************************************************************
//
// Method Name: GetChangeMapEvents
//
// Description:
//  Returns the vector of change maps events.
//
//***************************************************************************************************************************************************
std::vector<ChangeMapEvent*> EventStorage::GetChangeMapEvents()
{
   return mChangeMapEvents;
}

//***************************************************************************************************************************************************
//
// Method Name: ClearEvents
//
// Description:
//  Clear all the vectors holding events.
//
//***************************************************************************************************************************************************
void EventStorage::ClearEvents()
{
   // Remove all the change map events.
   for(auto currentChangeMapEvent = mChangeMapEvents.begin();
       currentChangeMapEvent != mChangeMapEvents.end();
       currentChangeMapEvent++)
   {
       delete *currentChangeMapEvent;
   } 
   mChangeMapEvents.clear();
}

//***************************************************************************************************************************************************
// End Public Method Definitions
//***************************************************************************************************************************************************

//***************************************************************************************************************************************************
// Start Protected Method Definitions
//***************************************************************************************************************************************************



//***************************************************************************************************************************************************
// End Protected Method Definitions
//***************************************************************************************************************************************************

//***************************************************************************************************************************************************
// Start Private Method Definitions
//***************************************************************************************************************************************************

//***************************************************************************************************************************************************
//
// Method Name: EventStorage
//
// Description:
//  Constructor.
//
//***************************************************************************************************************************************************
EventStorage::EventStorage()
{
}

//***************************************************************************************************************************************************
//
// Method Name: ~EventStorage
//
// Description:
//  Remove all allocated memory managed by this class.
//
//***************************************************************************************************************************************************
EventStorage::~EventStorage()
{
   // Remove all the events being stored.
   ClearEvents();
}


//***************************************************************************************************************************************************
// End Private Method Definitions
//***************************************************************************************************************************************************