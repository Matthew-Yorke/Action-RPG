//***************************************************************************************************************************************************
//
// File Name: EventManager.cpp
//
// Description:
//  TODO: Add file description.
//
// Change History:
//  Author               Date           Description
//  Matthew D. Yorke     MM/DD/YYYY     TODO: Add Description.
//
//***************************************************************************************************************************************************

#include "EventManager.h"
//***************************************************************************************************************************************************
// Start Public Method Definitions
//***************************************************************************************************************************************************

// Set initial static member variables.
EventManager* EventManager::mpInstance = nullptr;
int EventManager::mNumberOfReferences = 0;

//***************************************************************************************************************************************************
//
// Method Name: GetInstance
//
// Description:
//  If an instance doesn't exist, create a new instance of this class. Increment the number of references to this class. Return the instance of this
//  class.
//
//***************************************************************************************************************************************************
EventManager* EventManager::GetInstance()
{
    if (mpInstance == nullptr)
    {
        mpInstance = new EventManager();
    }
    mNumberOfReferences++;

    return mpInstance;
}

//***************************************************************************************************************************************************
//
// Method Name: ReleaseInstance
//
// Description:
//  Decrement the number of references to this class. If the number of references reaches zero and the instance exists, delete the instance of this
//  class.
//
//***************************************************************************************************************************************************
void EventManager::ReleaseInstance()
{
   mNumberOfReferences--;
 
   if((mNumberOfReferences == 0) && (mpInstance != nullptr))
   {
   	delete mpInstance;
   	mpInstance = nullptr;						
   }
}

//***************************************************************************************************************************************************
//
// Method Name: AddChangeMapEvent
//
// Description:
//  TODO: Add description.
//
//***************************************************************************************************************************************************
void EventManager::AddChangeMapEvent(ChangeMapEvent* theChangeMapEvent)
{
   mChangeMapEvents.push_back(theChangeMapEvent);
}

//*********************************************************************************************************************************************
//
// Method Name: GetChangeMapEvents
//
// Description:
//  Returns the vector of change maps events.
//
//*********************************************************************************************************************************************
std::vector<ChangeMapEvent*> EventManager::GetChangeMapEvents()
{
   return mChangeMapEvents;
}

//*********************************************************************************************************************************************
//
// Method Name: ClearEvents
//
// Description:
//  TODO: Add description.
//
//*********************************************************************************************************************************************
void EventManager::ClearEvents()
{
   // Remove all the change map events.
   for(auto currentChangeMapEvent = mChangeMapEvents.begin(); currentChangeMapEvent != mChangeMapEvents.end(); currentChangeMapEvent++)
   {
       delete *currentChangeMapEvent;
   } 
   mChangeMapEvents.clear();
}

//***************************************************************************************************************************************************
// End Public Method Definitions
//***************************************************************************************************************************************************

//***************************************************************************************************************************************************
// Start Protected Method Definitions
//***************************************************************************************************************************************************



//***************************************************************************************************************************************************
// End Protected Method Definitions
//***************************************************************************************************************************************************

//***************************************************************************************************************************************************
// Start Private Method Definitions
//***************************************************************************************************************************************************

EventManager::EventManager()
{
}

EventManager::~EventManager()
{
   // Remove all the events being stored.
   ClearEvents();
}


//***************************************************************************************************************************************************
// End Private Method Definitions
//***************************************************************************************************************************************************